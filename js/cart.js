// Cart module: localStorage-backed cart with UI for Cart and Checkout pages
// Author: Generated by Copilot

(function () {
  const CART_KEY = "app.cart.v1";

  const fmtCurrency = (n) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
      maximumFractionDigits: 0,
    }).format(n || 0);

  const read = () => {
    try {
      const raw = localStorage.getItem(CART_KEY);
      const arr = raw ? JSON.parse(raw) : [];
      if (!Array.isArray(arr)) return [];
      return arr.map((x) => ({
        id: String(x.id),
        name: String(x.name || "Sản phẩm"),
        price: Number(x.price || 0),
        image: x.image || "",
        qty: Math.max(1, parseInt(x.qty || 1, 10)),
      }));
    } catch {
      return [];
    }
  };

  const write = (cart) => {
    localStorage.setItem(CART_KEY, JSON.stringify(cart));
    updateBadge(cart);
  };

  const getTotals = (cart) => {
    const itemCount = cart.reduce((s, it) => s + it.qty, 0);
    const subtotal = cart.reduce((s, it) => s + it.price * it.qty, 0);
    const shipping = subtotal > 0 ? 0 : 0; // miễn phí vận chuyển demo
    const total = subtotal + shipping;
    return { itemCount, subtotal, shipping, total };
  };

  const add = (product, qty = 1) => {
    const cart = read();
    const id = String(product.id);
    const idx = cart.findIndex((x) => x.id === id);
    if (idx >= 0) cart[idx].qty += qty;
    else
      cart.push({
        id,
        name: product.name,
        price: Number(product.price || 0),
        image: product.image || "",
        qty: Math.max(1, parseInt(qty || 1, 10)),
      });
    write(cart);
    return cart;
  };

  const setQty = (id, qty) => {
    const cart = read();
    const idx = cart.findIndex((x) => x.id === String(id));
    if (idx >= 0) {
      cart[idx].qty = Math.max(1, parseInt(qty || 1, 10));
      write(cart);
    }
    return cart;
  };

  const remove = (id) => {
    const cart = read().filter((x) => x.id !== String(id));
    write(cart);
    return cart;
  };

  const clear = () => {
    write([]);
    return [];
  };

  const updateBadge = (cart = null) => {
    const el = document.querySelector("#cart-count, .cart-count");
    if (!el) return;
    const { itemCount } = getTotals(cart ?? read());
    el.textContent = String(itemCount);
    el.style.display = itemCount > 0 ? "inline-flex" : "none";
  };

  // UI: Cart page
  const renderCartTable = () => {
    const cart = read();
    const tbody = document.querySelector("#cart-table-body");
    const emptyBox = document.getElementById("cart-empty");
    const tableWrap = document.getElementById("cart-table-wrap");
    const sumSub = document.getElementById("summary-subtotal");
    const sumShip = document.getElementById("summary-shipping");
    const sumTotal = document.getElementById("summary-total");

    if (!tbody) return;

    tbody.innerHTML = "";

    if (!cart.length) {
      if (tableWrap) tableWrap.style.display = "none";
      if (emptyBox) emptyBox.style.display = "block";
    } else {
      if (tableWrap) tableWrap.style.display = "block";
      if (emptyBox) emptyBox.style.display = "none";

      for (const item of cart) {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td class="prod">
            <img src="${item.image || ""}" alt="${item.name}" onerror="this.style.display='none'"/>
            <span>${item.name}</span>
          </td>
          <td>${fmtCurrency(item.price)}</td>
          <td>
            <div class="qty">
              <button class="dec" data-action="dec" data-id="${item.id}">-</button>
              <input type="number" min="1" value="${item.qty}" data-id="${item.id}"/>
              <button class="inc" data-action="inc" data-id="${item.id}">+</button>
            </div>
          </td>
          <td class="line-total">${fmtCurrency(item.price * item.qty)}</td>
          <td><button class="remove" data-action="remove" data-id="${item.id}">×</button></td>
        `;
        tbody.appendChild(tr);
      }
    }

    const { subtotal, shipping, total } = getTotals(cart);
    if (sumSub) sumSub.textContent = fmtCurrency(subtotal);
    if (sumShip) sumShip.textContent = fmtCurrency(shipping);
    if (sumTotal) sumTotal.textContent = fmtCurrency(total);

    updateBadge(cart);
  };

  const bindCartEvents = () => {
    const tbody = document.querySelector("#cart-table-body");
    if (!tbody) return;

    tbody.addEventListener("click", (e) => {
      const btn = e.target.closest("button");
      if (!btn) return;
      const id = btn.getAttribute("data-id");
      const action = btn.getAttribute("data-action");
      if (!id || !action) return;
      const cart = read();
      const item = cart.find((x) => x.id === id);
      if (!item) return;
      if (action === "inc") setQty(id, item.qty + 1);
      if (action === "dec") setQty(id, Math.max(1, item.qty - 1));
      if (action === "remove") remove(id);
      renderCartTable();
    });

    tbody.addEventListener("change", (e) => {
      const input = e.target.closest("input[type=number]");
      if (!input) return;
      const id = input.getAttribute("data-id");
      const qty = parseInt(input.value || "1", 10);
      setQty(id, qty);
      renderCartTable();
    });

    const clearBtn = document.getElementById("btn-clear-cart");
    if (clearBtn) clearBtn.addEventListener("click", () => {
      if (confirm("Bạn có chắc muốn xóa toàn bộ giỏ hàng?")) {
        clear();
        renderCartTable();
      }
    });
  };

  const initCartPage = () => {
    renderCartTable();
    bindCartEvents();
  };

  // UI: Checkout page
  const renderCheckoutSummary = () => {
    const cart = read();
    const list = document.getElementById("checkout-items");
    const sumSub = document.getElementById("checkout-subtotal");
    const sumShip = document.getElementById("checkout-shipping");
    const sumTotal = document.getElementById("checkout-total");
    const empty = document.getElementById("checkout-empty");
    const wrap = document.getElementById("checkout-summary-wrap");

    if (!list) return;

    list.innerHTML = "";
    if (!cart.length) {
      if (wrap) wrap.style.display = "none";
      if (empty) empty.style.display = "block";
      return;
    }
    if (wrap) wrap.style.display = "block";
    if (empty) empty.style.display = "none";

    for (const it of cart) {
      const li = document.createElement("li");
      li.className = "checkout-item";
      li.innerHTML = `
        <span class="name">${it.name} × ${it.qty}</span>
        <span class="price">${fmtCurrency(it.price * it.qty)}</span>
      `;
      list.appendChild(li);
    }
    const { subtotal, shipping, total } = getTotals(cart);
    if (sumSub) sumSub.textContent = fmtCurrency(subtotal);
    if (sumShip) sumShip.textContent = fmtCurrency(shipping);
    if (sumTotal) sumTotal.textContent = fmtCurrency(total);
  };

  const bindCheckoutForm = () => {
    const form = document.getElementById("checkout-form");
    const noteEl = document.getElementById("order-note");
    if (!form) return;

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const cart = read();
      if (!cart.length) {
        alert("Giỏ hàng trống, vui lòng thêm sản phẩm trước khi thanh toán.");
        return;
      }

      const formData = new FormData(form);
      const payload = Object.fromEntries(formData.entries());
      // Simple validation
      if (!payload.fullname || !payload.phone || !payload.address) {
        alert("Vui lòng nhập đầy đủ Họ tên, Số điện thoại và Địa chỉ.");
        return;
      }

      // In a real app, send payload + cart to backend here
      const orderId = "DH" + Date.now();
      const msg = `Đặt hàng thành công!\nMã đơn: ${orderId}`;
      alert(msg);
      clear();
      renderCheckoutSummary();
      if (noteEl) noteEl.textContent = "Cảm ơn bạn đã mua hàng!";
    });
  };

  const initCheckoutPage = () => {
    renderCheckoutSummary();
    bindCheckoutForm();
  };

  // Generic: buttons with data-add-to-cart
  const bindGlobalAddToCart = () => {
    document.body.addEventListener("click", (e) => {
      const btn = e.target.closest("[data-add-to-cart]");
      if (!btn) return;
      const product = {
        id: btn.getAttribute("data-id") || btn.dataset.id,
        name: btn.getAttribute("data-name") || btn.dataset.name,
        price: parseFloat(
          btn.getAttribute("data-price") || btn.dataset.price || "0"
        ),
        image:
          btn.getAttribute("data-image") || btn.dataset.image || "",
      };
      const qtyAttr = btn.getAttribute("data-qty") || btn.dataset.qty;
      const qty = qtyAttr ? parseInt(qtyAttr, 10) : 1;
      if (!product.id || !product.name) return;
      add(product, isNaN(qty) ? 1 : qty);
      // UX: brief toast
      try {
        const toast = document.createElement("div");
        toast.className = "toast add-to-cart-toast";
        toast.textContent = "Đã thêm vào giỏ hàng";
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add("show"), 10);
        setTimeout(() => toast.classList.remove("show"), 1600);
        setTimeout(() => toast.remove(), 2000);
      } catch {}
    });
  };

  // Public API
  const Cart = {
    read,
    write,
    add,
    setQty,
    remove,
    clear,
    getTotals,
    updateBadge,
  };

  // Expose for debugging and manual use
  window.Cart = Cart;
  window.addToCart = (p, q) => add(p, q);

  document.addEventListener("DOMContentLoaded", () => {
    updateBadge();
    bindGlobalAddToCart();
    const page = document.querySelector("[data-page]");
    const pageName = page ? page.getAttribute("data-page") : "";
    if (pageName === "cart") initCartPage();
    if (pageName === "checkout") initCheckoutPage();
  });
})();
